结构体系模型
	Model I:以JSP为核心的体系结构
		分为两种
			纯粹使用JSP开发
			JSP+JavaBean
			
	
	Model II:以MVC为基础的体系结构
	
	
	区别:
		纯粹使用JSP的Model I
			优点:
				实现简单,开发时间短,开发人员专注于JSP
				对于小幅度的修改很容易实现,并且修改后不需要重新编译
			缺点:
				程序逻辑与页面显示混乱,可读性较差
				代码复用性较低,不利于大幅度、大范围的修改
				不利于分工合作
				
		JSP+javabean
			优点:
				代码复用性提高,有利于代码维护
				实现复杂的程序逻辑的时候,可读性提高
			缺点:
				缺乏浏览控制
				
				
	Model II体系将Servlet加入到体系结构中
		采用的是MVC的设计模式	
		Servlet扮演的是控制器的角色,主要解决了缺乏流程控制的问题
		MVC将系统分成了3个独立的模块
			应用程序模块:用于表示数据和业务逻辑
			数据显示模块:主要用于表示输入输出等用户交互
			控制器模块:用于发送请求和控制应用程序的流程
		
		优点:
			开发流程明确,有利于分工
			程序的控制流程集中
			更新维护比较简单
		
		缺点:
			对于系统前期的分析设计要求高
			学习时间长,要不断去适应不同的MVC框架
			开发时间长,复杂度提高,不适合小型的项目
			
			
MVC
	M:model			数据模型
	V:view			显示逻辑
	C:Controller	控制
		
	
	是一种软件架构的开发模式
	将系统分成了三种不同的部分
	model:封装了业务逻辑,对于业务按照一定的规则进行加工
	view:封装了显示逻辑
	controller:协调视图和模型
			        请求不在直接访问模型和视图
			        而是统一交给控制器取处理(所有的请求进的都是控制)
			        由控制器来分发给合适的模型来处理
			        模型处理之后也不会直接返回一个视图
			        而是交给控制
			        由控制器选择合适的视图,将结果展现给用户
			
	优点:
		多个视图可以共享同一个模型
		不同的模块方便维护
		使用者只关心url
		方便工作的分配
		
	缺点:		        
		mvc只是一个思想,对于实际的操作,需要做详细的设计
		增加了代码量
		
	
struts1
			        
			        
			        
	
	
	
			
		
		
		